name: Docker build on tag
env:
  DOCKER_CLI_EXPERIMENTAL: enabled
  TAG_FMT: "^refs/tags/(((.?[0-9]+){3,4}))$"
  DOCKER_BUILDKIT: 0
  COMPOSE_DOCKER_CLI_BUILD: 0

on:
  push:
    tags:
      - v[0-9]+.[0-9]+.[0-9]+
      - v[0-9]+.[0-9]+.[0-9]+-*

permissions:
  contents: read

jobs:
  build:
    strategy:
      matrix:
        service:
          - frontend
          - backend
    runs-on: ubuntu-latest
    timeout-minutes: 120
    name: Build ${{ matrix.service }} on ${{ matrix.runner-label }}
    concurrency: 
      group: ${{ github.workflow }}-${{ github.ref }}-${{ matrix.service }}-${{ matrix.runner-label }}
      cancel-in-progress: true

    steps:
      - name: Runner check
        id: runner-check
        run: |
          echo "Running on ${{ matrix.runner-label }}"
          if [ "${{ matrix.runner-label }}" = "self-hosted" ]; then
            echo "Using self-hosted runner"
          else
            echo "Using GitHub-hosted runner"
          fi

      # Skip swap configuration for GitHub-hosted runners
      - name: Configure swap
        if: matrix.runner-label == 'self-hosted'
        shell: bash
        run: |
          sudo swapoff /mnt/swapfile || true
          sudo rm -f /mnt/swapfile || true
          sudo fallocate -l 13G /mnt/swapfile || true
          sudo chmod 600 /mnt/swapfile
          sudo mkswap /mnt/swapfile
          sudo swapon /mnt/swapfile || true

      - name: Show current memory and swap status
        shell: bash
        run: |
          sudo free -h
          echo
          sudo swapon --show

      - name: Mount a tmpfs over /var/lib/docker
        if: matrix.runner-label == 'self-hosted'
        shell: bash
        run: |
          if [ ! -d "/var/lib/docker" ]; then
            echo "Directory '/var/lib/docker' not found"
            exit 1
          fi
          sudo mount -t tmpfs -o size=10G tmpfs /var/lib/docker
          sudo systemctl restart docker
          sudo df -h | grep docker

      - name: Cache Cargo registry
        uses: actions/cache@v3
        with:
          path: ~/.cargo/registry
          key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-registry-
            
      - name: Cache Cargo index
        uses: actions/cache@v3
        with:
          path: ~/.cargo/index
          key: ${{ runner.os }}-cargo-index-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-index-
            
      - name: Cache Cargo build
        uses: actions/cache@v3
        with:
          path: target
          key: ${{ runner.os }}-cargo-build-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-build-

      - name: Set env variables
        run: echo "TAG=${GITHUB_REF/refs\/tags\//}" >> $GITHUB_ENV

      - name: Show set environment variables
        run: |
          printf "      TAG: %s\n"  "$TAG"

      - name: Add SHORT_SHA env property with commit short sha
        run: echo "SHORT_SHA=`echo ${GITHUB_SHA} | cut -c1-8`" >> $GITHUB_ENV

      - name: Login to Docker
        run: |
          docker login -u "sondreb" -p "${{secrets.DOCKER_KEY}}"

      - name: Checkout project
        uses: actions/checkout@v4

      - name: Init repo for Dockerization
        run: docker/init.sh "$TAG"

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        id: qemu

      - name: Setup Docker buildx action
        uses: docker/setup-buildx-action@v3
        id: buildx

      - name: Available platforms
        run: echo ${{ steps.buildx.outputs.platforms }}

      - name: Cache Docker layers
        uses: actions/cache@v3
        id: cache
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Run Docker buildx for ${{ matrix.service }} against tag
        run: |
          docker buildx build \
          --cache-from "type=local,src=/tmp/.buildx-cache" \
          --cache-to "type=local,dest=/tmp/.buildx-cache" \
          --platform linux/amd64,linux/arm64 \
          --progress=plain \
          --tag blockcore/mempool-${{ matrix.service }}:$TAG \
          --tag blockcore/mempool-${{ matrix.service }}:latest \
          --build-context rustgbt=./rust \
          --build-context backend=./backend \
          --output "type=registry" ./${{ matrix.service }}/ \
          --build-arg commitHash=$SHORT_SHA
